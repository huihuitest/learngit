今日任务：继续学习分支管理
1.git分支创建与合并总结：

每次提交，git都把它们串成了一条时间线。截止到目前为止，只有一条线，在git里，这个分支叫做主分支即master分支，HEAD严格来说不是只想提交，而是指向了master，master才是指向提交的，所以HEAD指向的是当前分支。
前面的学习，master分支只是一条线，git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点。
每次提交，master就会向前移动一步，这样，随着你不断提交，master分支的线也越来越长。
git推荐在侧分支上进行开发，master分支用于正式版本发布以及版本迭代更新。
git就新建了一个指针dev，是基于master分支上的侧分支，指向master相同的提交，再把HEAD指向dev就表示当前分支在dev上。
假如我们在dev的工作完成了，就可以将dev合并到master上，直接把master指向dev的当前提交即可。
合并完分支之后就可以删除dev了，删除dev指针即可，最后剩下一条master分支。

小结：

Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>


2.解决冲突：
git推荐在dev分支上进行feature分支上进行功能开发提交，但是当在master分支上也有新的提交时会产生冲突git就无法快速合并，我们需要来解决这个冲突。
命令提交以及返回记录
13348@DESKTOP-E86F342 MINGW64 ~/learngit (dev)
$ git checkout -b feature1
Switched to a new branch 'feature1'

13348@DESKTOP-E86F342 MINGW64 ~/learngit (feature1)
$ git add readme.txt

13348@DESKTOP-E86F342 MINGW64 ~/learngit (feature1)
$ git commit -m "and simple"
[feature1 75f73f7] and simple
 1 file changed, 2 insertions(+), 1 deletion(-)

13348@DESKTOP-E86F342 MINGW64 ~/learngit (feature1)
$ git checkout master
Switched to branch 'master'
Your branch is up to date with 'github/master'.

13348@DESKTOP-E86F342 MINGW64 ~/learngit (master)
$ git add readme.txt

13348@DESKTOP-E86F342 MINGW64 ~/learngit (master)
$ git commit -m "& simple"
[master d447d0b] & simple
 1 file changed, 1 insertion(+), 1 deletion(-)

13348@DESKTOP-E86F342 MINGW64 ~/learngit (master)
$ git merge feature1
Auto-merging readme.txt
CONFLICT (content): Merge conflict in readme.txt
Automatic merge failed; fix conflicts and then commit the result.

13348@DESKTOP-E86F342 MINGW64 ~/learngit (master|MERGING)
$ git status
On branch master
Your branch is ahead of 'github/master' by 1 commit.
  (use "git push" to publish your local commits)

You have unmerged paths.
  (fix conflicts and run "git commit")
  (use "git merge --abort" to abort the merge)

Unmerged paths:
  (use "git add <file>..." to mark resolution)

        both modified:   readme.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        task-4-12.txt

no changes added to commit (use "git add" and/or "git commit -a")

//上面描述了冲突的原因。

13348@DESKTOP-E86F342 MINGW64 ~/learngit (master|MERGING)
$ git add readme.txt

13348@DESKTOP-E86F342 MINGW64 ~/learngit (master|MERGING)
$ git commit -m "fixed"
[master 8221dcf] fixed

//成功解决冲突

$ git log --graph --pretty=oneline --abbrev-commit
*   8221dcf conflict fixed
|\
| * 75f73f7 AND simple
* | d447d0b & simple
|/
* fec145a branch test
...
13348@DESKTOP-E86F342 MINGW64 ~/learngit (master)
$ git branch -d feature1
Deleted branch feature1 (was 75f73f7).




小结

当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

用git log --graph命令可以看到分支合并图。

周四任务：
讲学习分支管理策略，bug分支，feature分支和多人协作。
周五任务：
学习标签管理
周六任务：开始编写Packt.IoT.Building.Arduino-Based.Projects.1787120635的代码仓库。
周日任务：总结一周学习资料，汇总常用命令，汇总相关文件，准备下周在公司部署git。
goodnight！